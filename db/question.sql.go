// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: question.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createQuestion = `-- name: CreateQuestion :one
INSERT INTO questions (
    quiz_id,
    description,
    timer_option,
    timer,
    created_at,
    updated_at
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING ques_id, quiz_id, description, timer_option, timer, created_at, updated_at
`

type CreateQuestionParams struct {
	QuizID      sql.NullInt32
	Description string
	TimerOption bool
	Timer       int32
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (q *Queries) CreateQuestion(ctx context.Context, arg CreateQuestionParams) (Question, error) {
	row := q.db.QueryRowContext(ctx, createQuestion,
		arg.QuizID,
		arg.Description,
		arg.TimerOption,
		arg.Timer,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Question
	err := row.Scan(
		&i.QuesID,
		&i.QuizID,
		&i.Description,
		&i.TimerOption,
		&i.Timer,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createQuestionMinimal = `-- name: CreateQuestionMinimal :one
INSERT INTO questions (quiz_id, description, timer_option, timer)
VALUES ($1, $2, $3, $4)
RETURNING ques_id, quiz_id, description, timer_option, timer, created_at, updated_at
`

type CreateQuestionMinimalParams struct {
	QuizID      sql.NullInt32
	Description string
	TimerOption bool
	Timer       int32
}

func (q *Queries) CreateQuestionMinimal(ctx context.Context, arg CreateQuestionMinimalParams) (Question, error) {
	row := q.db.QueryRowContext(ctx, createQuestionMinimal,
		arg.QuizID,
		arg.Description,
		arg.TimerOption,
		arg.Timer,
	)
	var i Question
	err := row.Scan(
		&i.QuesID,
		&i.QuizID,
		&i.Description,
		&i.TimerOption,
		&i.Timer,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteQuestion = `-- name: DeleteQuestion :exec
DELETE FROM questions
WHERE ques_id = $1
`

func (q *Queries) DeleteQuestion(ctx context.Context, quesID int32) error {
	_, err := q.db.ExecContext(ctx, deleteQuestion, quesID)
	return err
}

const getQuestion = `-- name: GetQuestion :one
SELECT ques_id, quiz_id, description, timer_option, timer, created_at, updated_at FROM questions
WHERE ques_id = $1 LIMIT 1
`

func (q *Queries) GetQuestion(ctx context.Context, quesID int32) (Question, error) {
	row := q.db.QueryRowContext(ctx, getQuestion, quesID)
	var i Question
	err := row.Scan(
		&i.QuesID,
		&i.QuizID,
		&i.Description,
		&i.TimerOption,
		&i.Timer,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listQuestionsByQuiz = `-- name: ListQuestionsByQuiz :many
SELECT ques_id, quiz_id, description, timer_option, timer, created_at, updated_at FROM questions
WHERE quiz_id = $1
ORDER BY ques_id
`

func (q *Queries) ListQuestionsByQuiz(ctx context.Context, quizID sql.NullInt32) ([]Question, error) {
	rows, err := q.db.QueryContext(ctx, listQuestionsByQuiz, quizID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Question
	for rows.Next() {
		var i Question
		if err := rows.Scan(
			&i.QuesID,
			&i.QuizID,
			&i.Description,
			&i.TimerOption,
			&i.Timer,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateQuestion = `-- name: UpdateQuestion :one
UPDATE questions
SET
    quiz_id = COALESCE($2, quiz_id),
    description = COALESCE($3, description),
    timer_option = COALESCE($4, timer_option),
    timer = COALESCE($5, timer),
    updated_at = NOW()
WHERE ques_id = $1
RETURNING ques_id, quiz_id, description, timer_option, timer, created_at, updated_at
`

type UpdateQuestionParams struct {
	QuesID      int32
	QuizID      sql.NullInt32
	Description sql.NullString
	TimerOption sql.NullBool
	Timer       sql.NullInt32
}

func (q *Queries) UpdateQuestion(ctx context.Context, arg UpdateQuestionParams) (Question, error) {
	row := q.db.QueryRowContext(ctx, updateQuestion,
		arg.QuesID,
		arg.QuizID,
		arg.Description,
		arg.TimerOption,
		arg.Timer,
	)
	var i Question
	err := row.Scan(
		&i.QuesID,
		&i.QuizID,
		&i.Description,
		&i.TimerOption,
		&i.Timer,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
