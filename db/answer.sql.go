// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: answer.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/lib/pq"
)

const createAnswer = `-- name: CreateAnswer :one
INSERT INTO answers (
    ques_id,
    description,
    is_correct,
    created_at,
    updated_at
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING ans_id, ques_id, description, is_correct, created_at, updated_at
`

type CreateAnswerParams struct {
	QuesID      sql.NullInt32
	Description string
	IsCorrect   bool
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (q *Queries) CreateAnswer(ctx context.Context, arg CreateAnswerParams) (Answer, error) {
	row := q.db.QueryRowContext(ctx, createAnswer,
		arg.QuesID,
		arg.Description,
		arg.IsCorrect,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Answer
	err := row.Scan(
		&i.AnsID,
		&i.QuesID,
		&i.Description,
		&i.IsCorrect,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createAnswerMinimal = `-- name: CreateAnswerMinimal :one
INSERT INTO answers (
    ques_id, description, is_correct
) VALUES (
    $1, $2, $3
) returning ans_id, ques_id, description, is_correct, created_at, updated_at
`

type CreateAnswerMinimalParams struct {
	QuesID      sql.NullInt32
	Description string
	IsCorrect   bool
}

func (q *Queries) CreateAnswerMinimal(ctx context.Context, arg CreateAnswerMinimalParams) (Answer, error) {
	row := q.db.QueryRowContext(ctx, createAnswerMinimal, arg.QuesID, arg.Description, arg.IsCorrect)
	var i Answer
	err := row.Scan(
		&i.AnsID,
		&i.QuesID,
		&i.Description,
		&i.IsCorrect,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAnswer = `-- name: DeleteAnswer :exec
DELETE FROM answers
WHERE ans_id = $1
`

func (q *Queries) DeleteAnswer(ctx context.Context, ansID int32) error {
	_, err := q.db.ExecContext(ctx, deleteAnswer, ansID)
	return err
}

const getAnswer = `-- name: GetAnswer :one
SELECT ans_id, ques_id, description, is_correct, created_at, updated_at FROM answers
WHERE ans_id = $1 LIMIT 1
`

func (q *Queries) GetAnswer(ctx context.Context, ansID int32) (Answer, error) {
	row := q.db.QueryRowContext(ctx, getAnswer, ansID)
	var i Answer
	err := row.Scan(
		&i.AnsID,
		&i.QuesID,
		&i.Description,
		&i.IsCorrect,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listAnswersByQuestionIDs = `-- name: ListAnswersByQuestionIDs :many
SELECT ans_id, ques_id, description, is_correct, created_at, updated_at FROM answers
WHERE ques_id = ANY($1::int[])
ORDER BY ques_id, ans_id
`

func (q *Queries) ListAnswersByQuestionIDs(ctx context.Context, dollar_1 []int32) ([]Answer, error) {
	rows, err := q.db.QueryContext(ctx, listAnswersByQuestionIDs, pq.Array(dollar_1))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Answer
	for rows.Next() {
		var i Answer
		if err := rows.Scan(
			&i.AnsID,
			&i.QuesID,
			&i.Description,
			&i.IsCorrect,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAnswer = `-- name: UpdateAnswer :one
UPDATE answers
SET
    ques_id = COALESCE($2, ques_id),
    description = COALESCE($3, description),
    is_correct = COALESCE($4, is_correct),
    updated_at = NOW()
WHERE ans_id = $1
RETURNING ans_id, ques_id, description, is_correct, created_at, updated_at
`

type UpdateAnswerParams struct {
	AnsID       int32
	QuesID      sql.NullInt32
	Description sql.NullString
	IsCorrect   sql.NullBool
}

func (q *Queries) UpdateAnswer(ctx context.Context, arg UpdateAnswerParams) (Answer, error) {
	row := q.db.QueryRowContext(ctx, updateAnswer,
		arg.AnsID,
		arg.QuesID,
		arg.Description,
		arg.IsCorrect,
	)
	var i Answer
	err := row.Scan(
		&i.AnsID,
		&i.QuesID,
		&i.Description,
		&i.IsCorrect,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
