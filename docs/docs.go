// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/answers": {
            "post": {
                "description": "Create a new answer with the given details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "answers"
                ],
                "summary": "Create a new answer",
                "parameters": [
                    {
                        "description": "Answer details",
                        "name": "answer",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.AnswerApiModel"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/db.Answer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/answers/{id}": {
            "get": {
                "description": "Get an answer by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "answers"
                ],
                "summary": "Get an answer by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Answer ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/db.Answer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/questions": {
            "post": {
                "description": "Create a new question with the given details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "questions"
                ],
                "summary": "Create a new question",
                "parameters": [
                    {
                        "description": "Question details",
                        "name": "question",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.QuestionApiModel"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/db.Question"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/questions/{id}": {
            "get": {
                "description": "Get a question by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "questions"
                ],
                "summary": "Get a question by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Question ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/db.Question"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/quizzes": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a quiz, its questions, and their answers in a single transaction.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "quizzes"
                ],
                "summary": "Create a full quiz with questions and answers",
                "parameters": [
                    {
                        "description": "Full quiz details including questions and answers",
                        "name": "quiz",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apimodels.QuizApiModel"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The fully created quiz structure\" // \u003c-- FIX: Use qualified name",
                        "schema": {
                            "$ref": "#/definitions/apimodels.QuizApiModel"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden (Creator ID mismatch)",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/quizzes/basic": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create only the quiz entry without questions/answers. Consider using POST /quizzes instead.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "quizzes"
                ],
                "summary": "Create a new basic quiz entry (DEPRECATED? Use POST /quizzes for full creation)",
                "parameters": [
                    {
                        "description": "Basic Quiz details (Title, CreatorID)",
                        "name": "quiz",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apimodels.QuizApiModel"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The created basic quiz object",
                        "schema": {
                            "$ref": "#/definitions/db.Quiz"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/quizzes/{id}/basic": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get only the quiz details without questions/answers. Consider using GET /quizzes/{id}/full instead.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "quizzes"
                ],
                "summary": "Get basic quiz details by ID (DEPRECATED? Use GET /quizzes/{id}/full)",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Quiz ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Basic quiz object",
                        "schema": {
                            "$ref": "#/definitions/db.Quiz"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Quiz not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/quizzes/{id}/full": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get quiz details including all questions and their answers",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "quizzes"
                ],
                "summary": "Get full quiz details by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Quiz ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Full quiz structure\" // \u003c-- FIX: Use qualified name apimodels.QuizApiModel",
                        "schema": {
                            "$ref": "#/definitions/apimodels.QuizApiModel"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Quiz not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/users": {
            "post": {
                "description": "Create a new user with the given details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Create a new user",
                "parameters": [
                    {
                        "description": "User details",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/db.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/users/sync": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a user if they don't exist based on email, or updates existing user's name.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Sync Auth0 user with backend database via Email",
                "parameters": [
                    {
                        "description": "User details (name, email) from Auth0",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.SyncUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User found and potentially updated",
                        "schema": {
                            "$ref": "#/definitions/db.User"
                        }
                    },
                    "201": {
                        "description": "User created",
                        "schema": {
                            "$ref": "#/definitions/db.User"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized (JWT missing/invalid)",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "description": "Get a user by their ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get a user by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/db.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "apimodels.AnswerApiModel": {
            "type": "object",
            "required": [
                "isCorrect",
                "text"
            ],
            "properties": {
                "isCorrect": {
                    "type": "boolean"
                },
                "text": {
                    "type": "string"
                }
            }
        },
        "apimodels.QuestionApiModel": {
            "type": "object",
            "required": [
                "text",
                "timerValue",
                "useTimer"
            ],
            "properties": {
                "answers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/apimodels.AnswerApiModel"
                    }
                },
                "text": {
                    "type": "string"
                },
                "timerValue": {
                    "type": "integer"
                },
                "useTimer": {
                    "type": "boolean"
                }
            }
        },
        "apimodels.QuizApiModel": {
            "type": "object",
            "required": [
                "creator_id",
                "title"
            ],
            "properties": {
                "creator_id": {
                    "type": "integer"
                },
                "questions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/apimodels.QuestionApiModel"
                    }
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "db.Answer": {
            "type": "object",
            "properties": {
                "ansID": {
                    "type": "integer"
                },
                "createdAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "isCorrect": {
                    "type": "boolean"
                },
                "quesID": {
                    "$ref": "#/definitions/sql.NullInt32"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "db.Question": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "quesID": {
                    "type": "integer"
                },
                "quizID": {
                    "$ref": "#/definitions/sql.NullInt32"
                },
                "timer": {
                    "type": "integer"
                },
                "timerOption": {
                    "type": "boolean"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "db.Quiz": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "creatorID": {
                    "$ref": "#/definitions/sql.NullInt32"
                },
                "description": {
                    "$ref": "#/definitions/sql.NullString"
                },
                "isPriv": {
                    "type": "boolean"
                },
                "quizID": {
                    "type": "integer"
                },
                "quizTitle": {
                    "type": "string"
                },
                "timer": {
                    "type": "integer"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "db.User": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "$ref": "#/definitions/sql.NullTime"
                },
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "userID": {
                    "type": "integer"
                }
            }
        },
        "handlers.AnswerApiModel": {
            "description": "Answer details",
            "type": "object",
            "required": [
                "description",
                "question_id"
            ],
            "properties": {
                "description": {
                    "type": "string"
                },
                "is_correct": {
                    "type": "boolean"
                },
                "question_id": {
                    "type": "integer"
                }
            }
        },
        "handlers.CreateUserRequest": {
            "description": "User details",
            "type": "object",
            "required": [
                "email",
                "name"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "handlers.QuestionApiModel": {
            "description": "Question details",
            "type": "object",
            "required": [
                "description",
                "quiz_id"
            ],
            "properties": {
                "description": {
                    "type": "string"
                },
                "quiz_id": {
                    "type": "integer"
                },
                "timer": {
                    "type": "integer"
                },
                "timer_option": {
                    "type": "boolean"
                }
            }
        },
        "handlers.SyncUserRequest": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "description": "Name might not always be present from Auth0, handle potential empty string",
                    "type": "string"
                }
            }
        },
        "sql.NullInt32": {
            "type": "object",
            "properties": {
                "int32": {
                    "type": "integer"
                },
                "valid": {
                    "description": "Valid is true if Int32 is not NULL",
                    "type": "boolean"
                }
            }
        },
        "sql.NullString": {
            "type": "object",
            "properties": {
                "string": {
                    "type": "string"
                },
                "valid": {
                    "description": "Valid is true if String is not NULL",
                    "type": "boolean"
                }
            }
        },
        "sql.NullTime": {
            "type": "object",
            "properties": {
                "time": {
                    "type": "string"
                },
                "valid": {
                    "description": "Valid is true if Time is not NULL",
                    "type": "boolean"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{"http"},
	Title:            "Beanbag Backend API",
	Description:      "This is the API for the Beanbag Backend quiz application.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
