basePath: /
definitions:
  apimodels.AnswerApiModel:
    properties:
      isCorrect:
        type: boolean
      text:
        type: string
    required:
    - isCorrect
    - text
    type: object
  apimodels.QuestionApiModel:
    properties:
      answers:
        items:
          $ref: '#/definitions/apimodels.AnswerApiModel'
        type: array
      text:
        type: string
      timerValue:
        type: integer
      useTimer:
        type: boolean
    required:
    - text
    - timerValue
    - useTimer
    type: object
  apimodels.QuizApiModel:
    properties:
      creator_id:
        type: integer
      questions:
        items:
          $ref: '#/definitions/apimodels.QuestionApiModel'
        type: array
      quiz_id:
        type: integer
      title:
        type: string
    required:
    - creator_id
    - title
    type: object
  db.Answer:
    properties:
      ansID:
        type: integer
      createdAt:
        type: string
      description:
        type: string
      isCorrect:
        type: boolean
      quesID:
        $ref: '#/definitions/sql.NullInt32'
      updatedAt:
        type: string
    type: object
  db.Question:
    properties:
      createdAt:
        type: string
      description:
        type: string
      quesID:
        type: integer
      quizID:
        $ref: '#/definitions/sql.NullInt32'
      timer:
        type: integer
      timerOption:
        type: boolean
      updatedAt:
        type: string
    type: object
  db.Quiz:
    properties:
      createdAt:
        type: string
      creatorID:
        $ref: '#/definitions/sql.NullInt32'
      description:
        $ref: '#/definitions/sql.NullString'
      isPriv:
        type: boolean
      quizID:
        type: integer
      quizTitle:
        type: string
      timer:
        type: integer
      updatedAt:
        type: string
    type: object
  db.User:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/sql.NullTime'
      email:
        type: string
      name:
        type: string
      updatedAt:
        type: string
      userID:
        type: integer
    type: object
  handlers.AnswerApiModel:
    description: Answer details
    properties:
      description:
        type: string
      is_correct:
        type: boolean
      question_id:
        type: integer
    required:
    - description
    - question_id
    type: object
  handlers.CreateUserRequest:
    description: User details
    properties:
      email:
        type: string
      name:
        type: string
    required:
    - email
    - name
    type: object
  handlers.QuestionApiModel:
    description: Question details
    properties:
      description:
        type: string
      quiz_id:
        type: integer
      timer:
        type: integer
      timer_option:
        type: boolean
    required:
    - description
    - quiz_id
    type: object
  handlers.SyncUserRequest:
    properties:
      email:
        type: string
      name:
        description: Name might not always be present from Auth0, handle potential
          empty string
        type: string
    required:
    - email
    type: object
  sql.NullInt32:
    properties:
      int32:
        type: integer
      valid:
        description: Valid is true if Int32 is not NULL
        type: boolean
    type: object
  sql.NullString:
    properties:
      string:
        type: string
      valid:
        description: Valid is true if String is not NULL
        type: boolean
    type: object
  sql.NullTime:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is the API for the Beanbag Backend quiz application.
  title: Beanbag Backend API
  version: "1.0"
paths:
  /answers:
    post:
      consumes:
      - application/json
      description: Create a new answer with the given details
      parameters:
      - description: Answer details
        in: body
        name: answer
        required: true
        schema:
          $ref: '#/definitions/handlers.AnswerApiModel'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/db.Answer'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new answer
      tags:
      - answers
  /answers/{id}:
    get:
      description: Get an answer by its ID
      parameters:
      - description: Answer ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.Answer'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get an answer by ID
      tags:
      - answers
  /questions:
    post:
      consumes:
      - application/json
      description: Create a new question with the given details
      parameters:
      - description: Question details
        in: body
        name: question
        required: true
        schema:
          $ref: '#/definitions/handlers.QuestionApiModel'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/db.Question'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new question
      tags:
      - questions
  /questions/{id}:
    get:
      description: Get a question by its ID
      parameters:
      - description: Question ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.Question'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get a question by ID
      tags:
      - questions
  /quizzes:
    post:
      consumes:
      - application/json
      description: Create a quiz, its questions, and their answers in a single transaction.
      parameters:
      - description: Full quiz details including questions and answers
        in: body
        name: quiz
        required: true
        schema:
          $ref: '#/definitions/apimodels.QuizApiModel'
      produces:
      - application/json
      responses:
        "201":
          description: 'The fully created quiz structure" // <-- FIX: Use qualified
            name'
          schema:
            $ref: '#/definitions/apimodels.QuizApiModel'
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden (Creator ID mismatch)
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a full quiz with questions and answers
      tags:
      - quizzes
  /quizzes/{id}/basic:
    get:
      description: Get only the quiz details without questions/answers. Consider using
        GET /quizzes/{id}/full instead.
      parameters:
      - description: Quiz ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Basic quiz object
          schema:
            $ref: '#/definitions/db.Quiz'
        "400":
          description: Invalid ID
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Quiz not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get basic quiz details by ID (DEPRECATED? Use GET /quizzes/{id}/full)
      tags:
      - quizzes
  /quizzes/{id}/full:
    get:
      description: Get quiz details including all questions and their answers
      parameters:
      - description: Quiz ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 'Full quiz structure" // <-- FIX: Use qualified name apimodels.QuizApiModel'
          schema:
            $ref: '#/definitions/apimodels.QuizApiModel'
        "400":
          description: Invalid ID
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Quiz not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get full quiz details by ID
      tags:
      - quizzes
  /quizzes/basic:
    post:
      consumes:
      - application/json
      description: Create only the quiz entry without questions/answers. Consider
        using POST /quizzes instead.
      parameters:
      - description: Basic Quiz details (Title, CreatorID)
        in: body
        name: quiz
        required: true
        schema:
          $ref: '#/definitions/apimodels.QuizApiModel'
      produces:
      - application/json
      responses:
        "201":
          description: The created basic quiz object
          schema:
            $ref: '#/definitions/db.Quiz'
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a new basic quiz entry (DEPRECATED? Use POST /quizzes for full
        creation)
      tags:
      - quizzes
  /users:
    post:
      consumes:
      - application/json
      description: Create a new user with the given details
      parameters:
      - description: User details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/db.User'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new user
      tags:
      - users
  /users/{id}:
    get:
      description: Get a user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.User'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get a user by ID
      tags:
      - users
  /users/sync:
    post:
      consumes:
      - application/json
      description: Creates a user if they don't exist based on email, or updates existing
        user's name.
      parameters:
      - description: User details (name, email) from Auth0
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/handlers.SyncUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User found and potentially updated
          schema:
            $ref: '#/definitions/db.User'
        "201":
          description: User created
          schema:
            $ref: '#/definitions/db.User'
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized (JWT missing/invalid)
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Sync Auth0 user with backend database via Email
      tags:
      - users
schemes:
- http
swagger: "2.0"
