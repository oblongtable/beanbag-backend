---
name: 01 Main Joblist

permissions:
  contents: read # clone the repo to lint
  statuses: write #read/write to repo custom statuses
  packages: write # needed to push docker image to ghcr.io

on:
  push:
    branches:
      - main
  pull_request:

jobs:
# FIRST JOB #######################################################################   
  build-test-image:
    name: Build Image for Testing
    runs-on: ubuntu-latest

    env:
      # --- Database Credentials for Testing ---
      POSTGRES_HOST: beanbag-test-db # Example: Name of test DB service in compose
      POSTGRES_USER: testuser        # Example: User for test DB
      POSTGRES_PASSWORD: testpassword  # Example: Password for test DB
      POSTGRES_DB: testdb            # Example: Name of test DB
      POSTGRES_PORT: 5432            # Default Port

      PORT: 8080                     # Example test port
      CLIENT_ORIGIN: http://localhost:3001 # Example test origin
      AUTH0_DOMAIN: "test.auth0.com"
      AUTH0_AUDIENCE: "test-audience"
      AUTH0_CLIENT_ID: "test-client-id"
      AUTH0_CLIENT_SECRET: "test-client-secret"
      AUTH0_CALLBACK_URL: "http://localhost:3000/callback"

    permissions:
      packages: write # needed to push docker image to ghcr.io

    outputs:
      image_tag: ${{ steps.export-tag.outputs.tag }} # Output the tag for other jobs

    steps:
      - name: Checkout git repo
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
        # Pass the builder name to the build-push action later

      - name: Login to ghcr.io registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }} # Use GITHUB_TOKEN for GHCR

      - name: Export image tag
        id: export-tag 
        run: echo "tag=${{ github.run_id }}" >> $GITHUB_OUTPUT

      - name: Build and push beanbag-backend image
        uses: docker/build-push-action@v5
        with:
          context: . # Build context is the root of the repo
          file: ./Dockerfile.dev # Specify the Dockerfile to use
          builder: ${{ steps.buildx.outputs.name }} # Use the builder set up earlier
          push: true # Push the image to the registry
          tags: ghcr.io/${{ github.repository }}/beanbag-backend:${{ steps.export-tag.outputs.tag }}
          cache-from: type=gha # Enable GitHub Actions cache for builds
          cache-to: type=gha,mode=max
    
# NEXT JOB #######################################################################
  test-unit:
    name: Unit tests in Docker
    needs: [build-test-image] # Depends on the build job
    runs-on: ubuntu-latest

    env:
      # Define ALL variables needed by docker-compose-ci.yml
      # Database Credentials
      POSTGRES_USER: testuser
      POSTGRES_PASSWORD: testpassword
      POSTGRES_DB: testdb
      POSTGRES_PORT: 5432

      # App Config
      PORT: 8080
      CLIENT_ORIGIN: http://localhost:3000
      AUTH0_DOMAIN: "test.auth0.com"
      AUTH0_AUDIENCE: "test-audience"
      AUTH0_CLIENT_ID: "test-client-id"
      AUTH0_CLIENT_SECRET: "test-client-secret"
      AUTH0_CALLBACK_URL: "http://localhost:3000/callback"

      # Tag for the image built in the previous job
      IMAGE_TAG: ${{ needs.build-test-image.outputs.image_tag }}
      # GitHub Repository name (automatically available, but explicit doesn't hurt)
      GITHUB_REPOSITORY: ${{ github.repository }}


    permissions:
      packages: read # Needed to pull the image from GHCR

    steps:
      - name: Checkout git repo
        uses: actions/checkout@v4

      - name: Login to ghcr.io registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Run tests using docker compose up
        run: |
          # 'up' starts all services defined in the file
          # '--abort-on-container-exit' stops all containers if any container stops (e.g., test runner finishes)
          # '--exit-code-from beanbag-backend' makes the 'docker compose' command exit with the exit code of the test runner service
          docker compose -f docker-compose-ci.yml up --abort-on-container-exit --exit-code-from beanbag-backend

